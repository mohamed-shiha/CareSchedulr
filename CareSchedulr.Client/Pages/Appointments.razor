@page "/appointments"
@inject HttpClient Http
@inject ISnackbar Snackbar

<MudText Typo="Typo.h3" GutterBottom="true">Appointments</MudText>

<MudTabs>
    <MudTabPanel Text="Book Appointment">
        <AppointmentBooking />
    </MudTabPanel>
    <MudTabPanel Text="View Appointments" OnClick="LoadAppointments">
        <MudTable Items="@appointments" Hover="true" Striped="true" Loading="@loading" LoadingProgressColor="Color.Info">
            <HeaderContent>
                <MudTh>PPS Number</MudTh>
                <MudTh>Patient Name</MudTh>
                <MudTh>Date</MudTh>
                <MudTh>Time</MudTh>
                <MudTh>Description</MudTh>
                <MudTh>Edit</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="PPS Number">@context.PPSNumber</MudTd>
                <MudTd DataLabel="Patient Name">@context.PatientName</MudTd>
                <MudTd DataLabel="Date">@context.AppointmentDate?.ToShortDateString()</MudTd>
                <MudTd DataLabel="Time">@context.AppointmentTime?.ToString(@"hh\:mm")</MudTd>
                <MudTd DataLabel="Description">@context.Description</MudTd>
                <MudTd>
                    <MudIconButton Disabled="@(!IsAppointmentEditable(context))"
                                    Icon="@Icons.Material.Outlined.DeleteForever"
                                    Size="Size.Small"
                                    Color="Color.Error"
                                    aria-label="Cancel Appointment"
                                    OnClick="@(() => CancelAppointment(context.Id))">
                    </MudIconButton>
                    <MudIconButton 
                                    Icon="@Icons.Material.Outlined.Edit"
                                    Size="Size.Small"
                                    Color="Color.Primary"
                                    aria-label="Reschedule Appointment"
                                    OnClick="@(() => OpenRescheduleDialog(context.Id))">
                    </MudIconButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
        <MudDialog @bind-Visible="isRescheduleDialogVisible" Options="_backdropClick">
            <TitleContent>
                <MudText Typo="Typo.h6">Reschedule Appointment</MudText>
            </TitleContent>
            <DialogContent>
                <MudDatePicker @bind-Date="newDate" Label="New Date" />
                <MudTimePicker @bind-Time="newTime" Label="New Time" />
            </DialogContent>
            <DialogActions>
                <MudButton OnClick="CloseRescheduleDialog">Cancel</MudButton>
                <MudButton Color="Color.Primary" OnClick="RescheduleAppointment">Reschedule</MudButton>
            </DialogActions>
        </MudDialog>
    </MudTabPanel>
</MudTabs>



@code {
    private List<Appointment> appointments = new List<Appointment>();
    private bool loading = true;
    private bool isRescheduleDialogVisible = false;
    private int appointmentIdToReschedule;
    private DateTime? newDate;
    private TimeSpan? newTime;
    private readonly DialogOptions _backdropClick = new() { BackdropClick = false };

    protected override async Task OnInitializedAsync()
    {
        await LoadAppointments();
    }

    private bool IsAppointmentEditable(Appointment appointment)
    {
        if (!appointment.AppointmentDate.HasValue)
        {
            return false;
        }

        if(appointment.AppointmentDate.Value.Date > DateTime.UtcNow.Date)
        {
            return true;
        }
        return false;
    }

    private void CloseRescheduleDialog()
    {
        isRescheduleDialogVisible = !isRescheduleDialogVisible;
    }

    private async Task RescheduleAppointment()
    {
        if (newDate.HasValue && newTime.HasValue)
        {
            var rescheduleDto = new AppointmentRescheduleDto
                {
                    NewDate = newDate.Value,
                    NewTime = newTime.Value
                };

            var response = await Http.PutAsJsonAsync($"api/appointments/{appointmentIdToReschedule}/reschedule", rescheduleDto);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Appointment rescheduled successfully", Severity.Success);
                await LoadAppointments();
            }
            else
            {
                Snackbar.Add("Failed to reschedule appointment", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("Please select both date and time", Severity.Warning);
        }

        CloseRescheduleDialog();
    }

    private async Task LoadAppointments()
    {
        try
        {
            appointments = await Http.GetFromJsonAsync<List<Appointment>>("api/appointments") ?? new List<Appointment>();
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error loading appointments: " + ex.Message, Severity.Error);
        }
        finally
        {
            loading = false;
        }
    }

    private void OpenRescheduleDialog(int id)
    {
        appointmentIdToReschedule = id;
        var appointment = appointments.FirstOrDefault(appointment => appointment.Id == id);
        if(appointment == null)
        {
            Snackbar.Add("Appointment can't be edited", Severity.Success);
            return;
        }
        newDate = appointment.AppointmentDate;
        newTime = appointment.AppointmentTime;
        isRescheduleDialogVisible = !isRescheduleDialogVisible;
    }

    private async Task CancelAppointment(int id)
    {
        var response = await Http.DeleteAsync($"api/appointments/{id}");
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Appointment cancelled successfully", Severity.Success);
            await LoadAppointments();
        }
        else
        {
            Snackbar.Add("Failed to cancel appointment", Severity.Error);
        }
    }
}
